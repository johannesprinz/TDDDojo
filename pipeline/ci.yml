variables:
  major: 0
  minor: 0

trigger:
  - main

stages:
  - stage: Versioning
    displayName: Versioning
    jobs:
      - job: SetMainVersion
        displayName: "Set main version"
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
        variables:
          patch: $[counter(variables['minor'], 0)]
        steps:
          - bash: echo "##vso[build.updatebuildnumber]$(major).$(minor).$(patch)"
            name: SetMainBuildName
      - job: SetBranchVersion
        displayName: "Set branch version"
        condition: ne(variables['Build.SourceBranch'], 'refs/heads/main')
        variables:
          prpatch: $[counter(variables['system.pullrequest.pullrequestid'], 0)]
          brpatch: $[counter(variables['build.sourcebranchname'], 0)]
        steps:
          - bash: echo "##vso[build.updatebuildnumber]$(major).$(minor)-PullRequest.$(prpatch)"
            condition: eq(variables['Build.Reason'], 'PullRequest')
            name: SetPRBuildName
          - bash: echo "##vso[build.updatebuildnumber]$(major).$(minor)-$(Build.SourceBranchName).$(brpatch)"
            condition: ne(variables['Build.Reason'], 'PullRequest')
            name: SetBranchBuildName
  - stage: BuildAndTest
    dependsOn: Versioning
    displayName: "Build and test"
    jobs:
      - job: BuildAndTestLinux
        displayName: "Build and test on linux to get full coverage report"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: DotNetCoreCLI@2
            displayName: "Test"
            inputs:
              command: "test"
              publishTestResults: false
              arguments: "-v=normal /p:CollectCoverage=true  /p:CoverletOutput=$(Build.SourcesDirectory)/bin/results/ /p:CoverletOutputFormat=json%2Ccobertura /p:MergeWith=$(Build.SourcesDirectory)/bin/results/coverage.json"
          - task: PublishCodeCoverageResults@1
            displayName: "Publish"
            inputs:
              codeCoverageTool: cobertura
              summaryFileLocation: "**/coverage.cobertura.xml"
              reportDirectory: "$(Build.SourcesDirectory)/bin/results/"
      #- job: BuildAndTestWindows
      #  dependsOn: BuildAndTestLinux
      #  displayName: "Build and test on windows for PR coverage status checks"
      #  pool:
      #    vmImage: "windows-latest"
      #  steps:
      #    - task: DotNetCoreCLI@2
      #      displayName: "Test and publish"
      #      inputs:
      #        command: "test"
      #        publishTestResults: true
      #        arguments: '--collect:"Code Coverage"'
